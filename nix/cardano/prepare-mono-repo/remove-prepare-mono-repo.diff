diff --git a/flake.nix b/flake.nix
index bc2d1cd5b96..6380a38549c 100644
--- a/flake.nix
+++ b/flake.nix
@@ -35,7 +35,6 @@
         n2c.follows = "n2c";
         data-merge.follows = "data-merge";
         cardano-iohk-nix.follows = "iohk-nix";
-        cardano-node.follows = "cardano-node";
         cardano-db-sync.follows = "cardano-db-sync";
         cardano-wallet.follows = "cardano-wallet";
       };
@@ -47,11 +46,6 @@
     capsules.url = "github:input-output-hk/devshell-capsules";
     # --------------------------------------------------------------
     # --- Bride Heads ----------------------------------------------
-    # TODO: remove cardano-node (and use self) when mono-repo branch is merged:
-    cardano-node = {
-      url = "github:input-output-hk/cardano-node/1.35.0";
-      flake = false;
-    };
     cardano-db-sync.url = "github:input-output-hk/cardano-db-sync/13.0.0";
     cardano-wallet.url = "github:input-output-hk/cardano-wallet/v2022-07-01";
     cardano-ogmios.url = "github:input-output-hk/cardano-ogmios";
diff --git a/flake.nix.orig b/flake.nix.orig
deleted file mode 100644
index c83705c5595..00000000000
--- a/flake.nix.orig
+++ /dev/null
@@ -1,160 +0,0 @@
-{
-  description = "Cardano World";
-
-  inputs.nix-inclusive.url = "github:input-output-hk/nix-inclusive";
-  inputs = {
-    std = {
-      url = "github:divnix/std";
-      inputs.nixpkgs.follows = "nixpkgs";
-    };
-    n2c.url = "github:nlewo/nix2container";
-    haskell-nix = {
-      url = "github:input-output-hk/haskell.nix";
-      inputs.hackage.follows = "hackage";
-    };
-    hackage = {
-      url = "github:input-output-hk/hackage.nix";
-      flake = false;
-    };
-    iohk-nix = {
-      url = "github:input-output-hk/iohk-nix";
-      inputs.nixpkgs.follows = "nixpkgs";
-    };
-    data-merge.url = "github:divnix/data-merge";
-    byron-chain = {
-      url = "github:input-output-hk/cardano-mainnet-mirror";
-      flake = false;
-    };
-    # --- Bitte Stack ----------------------------------------------
-    bitte.url = "github:input-output-hk/bitte";
-    bitte-cells = {
-      url = "github:input-output-hk/bitte-cells";
-      inputs = {
-        std.follows = "std";
-        nixpkgs.follows = "nixpkgs";
-        n2c.follows = "n2c";
-        data-merge.follows = "data-merge";
-        cardano-iohk-nix.follows = "iohk-nix";
-        cardano-node.follows = "cardano-node";
-        cardano-db-sync.follows = "cardano-db-sync";
-        cardano-wallet.follows = "cardano-wallet";
-      };
-    };
-    # --------------------------------------------------------------
-    # --- Auxiliaries ----------------------------------------------
-    nixpkgs.url = "github:nixos/nixpkgs/nixos-22.05";
-    nixpkgs-haskell.follows = "haskell-nix/nixpkgs-unstable";
-    capsules.url = "github:input-output-hk/devshell-capsules";
-    # --------------------------------------------------------------
-    # --- Bride Heads ----------------------------------------------
-<<<<<<< HEAD
-    # TODO: remove when moved to monorepo
-    cardano-node.url = "github:input-output-hk/cardano-node/1.35.0";
-=======
-    # TODO: remove cardano-node (and use self) when mono-repo branch is merged:
-    cardano-node = {
-      url = "github:input-output-hk/cardano-node/1.35.0-rc4";
-      flake = false;
-    };
->>>>>>> 5c5ade258a (Build cardano-node repo locally, prepare for mono-repo.)
-    cardano-db-sync.url = "github:input-output-hk/cardano-db-sync/13.0.0-rc3";
-    cardano-wallet.url = "github:input-output-hk/cardano-wallet/";
-    cardano-ogmios.url = "github:input-output-hk/cardano-ogmios/vasil";
-    cardano-graphql = {
-      url = "github:input-output-hk/cardano-graphql";
-      flake = false;
-    };
-    cardano-explorer-app = {
-      url = "github:input-output-hk/cardano-explorer-app/fix-nix-system";
-      flake = false;
-    };
-    #cardano-rosetta = {
-    #  url = "github:input-output-hk/cardano-rosetta";
-    #  flake = false;
-    #};
-    # --------------------------------------------------------------
-  };
-  outputs = inputs: let
-    inherit (inputs.nixpkgs) lib;
-    nomadEnvs = inputs.self.${system}.cloud.nomadEnvs;
-    system = "x86_64-linux";
-  in
-    inputs.std.growOn {
-      inherit inputs;
-      cellsFrom = ./nix;
-      #debug = ["cells" "cloud" "packages"];
-      organelles = [
-        (inputs.std.data "constants")
-        (inputs.std.data "environments")
-        (inputs.std.data "nomadEnvs")
-        (inputs.std.devshells "devshells")
-        (inputs.std.functions "bitteProfile")
-        (inputs.std.functions "devshellProfiles")
-        (inputs.std.functions "hydrationProfiles")
-        (inputs.std.functions "library")
-        (inputs.std.functions "nomadJob")
-        (inputs.std.containers "oci-images")
-        (inputs.std.installables "packages")
-        (inputs.std.functions "hydraJobs")
-        (inputs.std.functions "prepare-mono-repo")
-        (inputs.std.runnables "entrypoints")
-        (inputs.std.runnables "healthChecks")
-        # automation
-        (inputs.std.runnables "jobs")
-        (inputs.std.functions "pipelines")
-      ];
-    }
-    # Soil (layers) ...
-    # 1) bitte instrumentation (TODO: `std`ize bitte)
-    (
-      let
-        bitte = inputs.bitte.lib.mkBitteStack {
-          inherit inputs;
-          inherit (inputs) self;
-          domain = "world.dev.cardano.org";
-          bitteProfile = inputs.self.${system}.metal.bitteProfile.default;
-          hydrationProfile = inputs.self.${system}.cloud.hydrationProfiles.default;
-          deploySshKey = "./secrets/ssh-cardano";
-        };
-      in
-        # if the bitte input is silenced (replaced by divnix/blank)
-        # then don't generate flake level attrNames from mkBitteStack (it fails)
-        if inputs.bitte ? lib
-        then bitte
-        else {}
-    )
-    # 2) renderes nomad environments (TODO: `std`ize as actions)
-    {
-      infra = inputs.bitte.lib.mkNomadJobs "infra" nomadEnvs;
-      vasil-qa = inputs.bitte.lib.mkNomadJobs "vasil-qa" nomadEnvs;
-      vasil-dev = inputs.bitte.lib.mkNomadJobs "vasil-dev" nomadEnvs;
-    }
-    # 3) hydra jobs
-    (let
-      jobs = lib.filterAttrsRecursive (n: _: n != "recurseForDerivations") (
-        lib.mapAttrs (n: lib.mapAttrs (_: cell: cell.hydraJobs or {})) {
-        # systems with hydra builders:
-        inherit (inputs.self) x86_64-linux x86_64-darwin;
-      });
-      requiredJobs = lib.filterAttrsRecursive (n: v: n == "required" || !(lib.isDerivation v)) jobs;
-      required = inputs.self.x86_64-linux.automation.jobs.mkHydraRequiredJob [] requiredJobs;
-     in {
-       hydraJobs = jobs // {
-         inherit required;
-       };
-     }
-    );
-  # --- Flake Local Nix Configuration ----------------------------
-  nixConfig = {
-    extra-substituters = [
-      # TODO: spongix
-      "https://cache.iog.io"
-    ];
-    extra-trusted-public-keys = [
-      "hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ="
-    ];
-    # post-build-hook = "./upload-to-cache.sh";
-    allow-import-from-derivation = "true";
-  };
-  # --------------------------------------------------------------
-}
diff --git a/nix/automation/devshells.nix b/nix/automation/devshells.nix
index 6eb1d8cd4d0..0f9f3ea8359 100644
--- a/nix/automation/devshells.nix
+++ b/nix/automation/devshells.nix
@@ -72,12 +72,6 @@ in {
       inputs.cells.cardano.devshellProfiles.world
     ];
   };
-  monorepo = std.lib.mkShell {
-    imports = [
-      cardanoWorld
-      inputs.cells.cardano.devshellProfiles.monorepo
-    ];
-  };
   minimal = std.lib.mkShell {
     imports = [
       cardanoWorld
diff --git a/nix/automation/jobs.nix b/nix/automation/jobs.nix
index a4382a0a764..6ae72d4215c 100644
--- a/nix/automation/jobs.nix
+++ b/nix/automation/jobs.nix
@@ -2,7 +2,7 @@
   inputs,
   cell,
 }: let
-  inherit (inputs) nixpkgs cells iohk-nix cardano-node;
+  inherit (inputs) nixpkgs cells iohk-nix;
   inherit (cells.cardano) packages oci-images;
   inherit (nixpkgs) lib;
   inherit (inputs.bitte-cells._writers.library) writeShellApplication;
@@ -67,46 +67,6 @@
       fi
   '';
 in {
-  update-mono-repo = writeShellApplication {
-    name = "update-mono-repo";
-    description = "Update the checksums neccesary to build the mono-repo";
-    text = let project = packages.project.appendModule { src = lib.mkForce cardano-node; }; in ''
-      # go to project root directory:
-      while [[ $PWD != / && ! -e "flake.nix" ]]; do
-        cd ..
-      done
-
-      nix-prefetch-git --deepClone --leave-dotGit --quiet https://github.com/input-output-hk/cardano-node ${cardano-node.rev} | jq -r .sha256 > nix/cardano/prepare-mono-repo/cardano-node.sha256
-      nix-prefetch-git --deepClone --leave-dotGit --quiet https://github.com/input-output-hk/ouroboros-network ${project.pkg-set.config.packages.ouroboros-network.src.rev} | jq -r .sha256 > nix/cardano/prepare-mono-repo/ouroboros-network.sha256
-      nix-prefetch-git --deepClone --leave-dotGit --quiet https://github.com/input-output-hk/cardano-ledger ${project.pkg-set.config.packages.cardano-ledger-core.src.rev} | jq -r .sha256 > nix/cardano/prepare-mono-repo/cardano-ledger.sha256
-      nix-prefetch-git --deepClone --leave-dotGit --quiet https://github.com/input-output-hk/ekg-forward ${project.pkg-set.config.packages.ekg-forward.src.rev} | jq -r .sha256 > nix/cardano/prepare-mono-repo/ekg-forward.sha256
-      nix build .#${nixpkgs.system}.cardano.prepare-mono-repo.mono-repo
-    '';
-    runtimeInputs = with nixpkgs; [ inputs.haskell-nix.inputs.nixpkgs-2105.legacyPackages.${nixpkgs.system}.nix-prefetch-git git jq];
-  };
-  merge-mono-repo = writeShellApplication {
-    description = "Create/Replace the mono-repo branch of current git repo";
-    name = "merge-mono-repo";
-    text = ''
-      # go to project root directory:
-      while [[ $PWD != / && ! -e ".git" ]]; do
-        cd ..
-      done
-      nix build .#${nixpkgs.system}.cardano.prepare-mono-repo.mono-repo
-      git branch -D mono-repo || true
-      git checkout -b mono-repo
-      git remote add nix-mono-repo ./result || true
-      git fetch nix-mono-repo
-      git merge nix-mono-repo/fetchgit --allow-unrelated-histories --no-ff \
-        -m "Merge cardano-node, ouroborous, ledger and ekg-forward into mono-repo"
-      git apply -3 nix/cardano/prepare-mono-repo/remove-prepare-mono-repo.diff
-      rm -r nix/cardano/prepare-mono-repo
-      nix flake lock --update-input mono-repo
-      nix flake lock --update-input cardano-node
-      git commit -a -m "Adapt nix build after merge into mono repo"
-    '';
-    runtimeInputs = with nixpkgs; [ nix git ];
-  };
   update-cabal-source-repo-checksums = writeShellApplication {
     name = "update-cabal-source-repo-checksums";
     text = ''
diff --git a/nix/cardano/packages/default.nix b/nix/cardano/packages/default.nix
index ba35a57658f..d0608f4ea11 100644
--- a/nix/cardano/packages/default.nix
+++ b/nix/cardano/packages/default.nix
@@ -3,7 +3,7 @@
 ,
 }:
 let
-  inherit (inputs) self std nixpkgs iohk-nix cardano-node
+  inherit (inputs) self std nixpkgs iohk-nix
     cardano-wallet cardano-db-sync cardano-ogmios cardano-graphql cardano-explorer-app nix-inclusive;
   inherit (inputs.cells) cardano;
   inherit (nixpkgs) lib;
@@ -27,8 +27,7 @@ let
     (import ./haskell.nix {
       inherit lib haskell-nix;
       inherit (inputs) byron-chain;
-      # TODO: switch to self after mono-repo branch is merged:
-      src = cardano-node;
+      src = self;
     }).extend (final: prev: {
       release = nixpkgs.callPackage ./binary-release.nix {
         inherit (final.pkgs) stdenv;
diff --git a/nix/cardano/packages/haskell.nix b/nix/cardano/packages/haskell.nix
index 430638aa223..6ee44039b73 100644
--- a/nix/cardano/packages/haskell.nix
+++ b/nix/cardano/packages/haskell.nix
@@ -42,14 +42,9 @@ in
       name = "cardano-world-src";
       filter = path: type:
         let relPath = lib.removePrefix "${src.outPath}/" path; in
-        # excludes directories not part of cabal project:
-        (type != "directory" || (builtins.match ".*/.*" relPath != null) || (!(lib.elem relPath [
-          "nix"
-          "doc"
-          "docs"
-        ]) && !(lib.hasPrefix "." relPath)))
-        # only keep cabal.project from files at root:
-        && (type == "directory" || builtins.match ".*/.*" relPath != null || (relPath == "cabal.project"))
+        # only keep cabal.project and directories under src:
+        (relPath == "cabal.project" || relPath == "src" || (type == "directory" && (builtins.match "src/.*" relPath != null))
+          || (builtins.match "src/.*/.*" relPath != null))
         && (lib.cleanSourceFilter path type)
         && (haskell-nix.haskellSourceFilter path type)
         && !(lib.hasSuffix ".gitignore" relPath)
